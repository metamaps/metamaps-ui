import { connect } from 'react-redux'

import ReactApp from '../Metamaps/GlobalUI/ReactApp'
import MapView from '../routes/MapView'

function mapStateToProps(state) {
  const {
    mobile,
    map,
    topic,
    metacodeSets,
    currentUser,
    allForFiltering,
    visibleForFiltering,
    filterData,
    mapIsStarred,
    openTopic,
    hasLearnedTopicCreation,
    isNewMap,
    relevantPeopleForMap,
    openSynapse,
    synapseCardPosition,
    synapseCardSynapses,
    participants,
    isParticipating,
    conversationLive,
    unreadMessages,
    contextNode,
    contextEdge,
    contextFetchingSiblingsData,
    contextSiblingsData,
    contextPos
  } = state

  return {
    mobile,
    map,
    topic,
    metacodeSets,
    currentUser,
    allForFiltering,
    visibleForFiltering,
    filterData,
    mapIsStarred,
    openTopic,
    hasLearnedTopicCreation,
    isNewMap,
    relevantPeopleForMap,
    openSynapse,
    synapseCardPosition,
    synapseCardSynapses,
    participants,
    isParticipating,
    conversationLive,
    unreadMessages,
    contextMenu: !!(contextNode || contextEdge),
    contextNode,
    contextEdge,
    contextFetchingSiblingsData,
    contextSiblingsData,
    contextPos
  }
}

function mapDispatchToProps(dispatch)  {
  const {
    launchNewMap,
    endActiveMap,
    toggleInfoBox,
    toggleMetacode,
    toggleMapper,
    toggleSynapse,
    filterAllMetacodes,
    filterAllMappers,
    filterAllSynapses,
    openImportLightbox,
    forkMap,
    openHelpLightbox,
    onMapStar,
    onMapUnstar,
    onZoomExtents,
    onZoomIn,
    onZoomOut,
    initNewTopic,
    initNewSynapse,
    openMetacodeSwitcher,
    selectMapPermission,
    deleteActiveMap,
    updateThumbnail,
    onInfoBoxMount,
    removeCollaborator,
    onSynapseCardMount,
    onSynapseDirectionChange,
    onSynapsePermissionSelect,
    onSynapseSelect,
    updateTopic,
    onTopicFollow,
    redrawCanvas,
    onOpen,
    onClose,
    leaveCall,
    joinCall,
    inviteACall,
    inviteToJoin,
    videoToggleClick,
    cursorToggleClick,
    soundToggleClick,
    contextDelete,
    contextRemove,
    contextHide,
    contextCenterOn,
    contextPopoutTopic,
    contextUpdatePermissions,
    contextOnMetacodeSelect,
    contextFetchSiblings,
    contextPopulateSiblings
  } = ReactApp.getCallbackProps()

  return {
    launchNewMap,
    endActiveMap,  
    toggleInfoBox,
    toggleMetacode,
    toggleMapper,
    toggleSynapse,
    filterAllMetacodes,
    filterAllMappers,
    filterAllSynapses,
    openImportLightbox,
    forkMap,
    openHelpLightbox,
    onMapStar,
    onMapUnstar,
    onZoomExtents,
    onZoomIn,
    onZoomOut,
    initNewTopic,
    initNewSynapse,
    openMetacodeSwitcher,
    selectMapPermission,
    deleteActiveMap,
    updateThumbnail,
    onInfoBoxMount,
    removeCollaborator,
    onSynapseCardMount,
    onSynapseDirectionChange,
    onSynapsePermissionSelect,
    onSynapseSelect,
    updateTopic,
    onTopicFollow,
    redrawCanvas,
    onOpen,
    onClose,
    leaveCall,
    joinCall,
    inviteACall,
    inviteToJoin,
    videoToggleClick,
    cursorToggleClick,
    soundToggleClick,
    contextDelete,
    contextRemove,
    contextHide,
    contextCenterOn,
    contextPopoutTopic,
    contextUpdatePermissions,
    contextOnMetacodeSelect,
    contextFetchSiblings,
    contextPopulateSiblings
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(MapView)